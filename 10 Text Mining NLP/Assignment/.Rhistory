View(insta)
View(insta)
View(fb)
View(fb)
View(ln)
#social media NA :
library("igraph")
fb_new <- graph.edgelist(as.matrix(fb), directed = TRUE)
make_star
make_star(fb,mode = c("in", "out", "mutual",
"undirected"), center = 1)
make_star(fb,mode = c("in"), center = 1)
g1 <- graph( edges=c(fb$V1,fb$V2, fb$V3,fb$V4, fb$V5, fb$V6,fb$V7,fb$V8,fb$V9), n=3, directed=F )
fb[]
fb[1,]
V(fb)$V1
vertex(fb)$V1
vertex_attr(fb)
class(fb)
graph_from_data_frame(fb, directed = TRUE, vertices = NULL)
plot(graph_from_data_frame(fb, directed = TRUE, vertices = NULL))
plot(graph.data.frame(fb,directed=TRUE,vertices=insta))
t
g1 <- graph.data.frame(fb,directed=TRUE,vertices=insta)
g1 <- graph_from_data_frame(fb,directed=TRUE,vertices=insta)
g1 <- graph_from_data_frame(fb,directed=TRUE,vertices=insta)
plot(graph_from_data_frame(fb, directed = TRUE, vertices = NULL))
plot(graph_from_data_frame(fb, directed = TRUE, vertices = V1))
plot(graph_from_data_frame(fb, directed = TRUE, vertices = c(fb$V1,fb$V2)))
g1 <- graph_from_data_frame(fb,directed=TRUE,vertices=insta)
plot(graph_from_data_frame(fb, directed = TRUE, vertices = c(fb$V1,fb$V2)))
network <- graph_from_adjacency_matrix(fb , mode='undirected', diag=F )
fbmat <- as.matrix(fb)
network <- graph_from_adjacency_matrix(fbmat , mode='undirected', diag=F )
fbnew <- graph.edgelist(as.matrix(fb[, c(3, 5)]), directed = TRUE)
fbnew <- graph.edgelist(as.matrix(fb[, c(3, 5)]), directed = TRUE)
class(fb)
fbnew <- graph.edgelist(as.matrix(fb[, c(3, 4)]), directed = TRUE)
fbnew <- graph.edgelist(as.matrix(fb[, c(3, 4)]), directed = TRUE)
g1 <- graph_from_data_frame(fb, directed = TRUE, vertices =NULL)
plot(g1, layout=layout.sphere, main="sphere")
plot(g1, layout=layout.circle, main="circle")
plot(g1, layout=layout.random, main="random")
plot(g1, layout=layout.circle, main="circle")
net <- graph_from_data_frame(fb,insta,directed=F)
colnames(fb) <- c("fb1","fb2","fb3","fb4","fb5","fb6","fb7","fb8","fb9")
View(fb)
View(fb)
colnames(ln) <- c("ln1","ln2","ln3","ln4","ln6","ln6","ln7","ln8","fb9","ln10","ln11","ln12","ln13")
colnames(insta) <- c("in1","in2","in3","in4","in6","in6","in7","in8")
net <- graph_from_data_frame(fb,insta,directed=F)
View(insta)
View(insta)
g1 <- graph_from_data_frame(fb, directed = TRUE, vertices =NULL)
plot(g1, layout=layout.sphere, main="sphere")
plot(g1, layout=layout.circle, main="circle")
plot(g1, layout=layout.random, main="random")
#social media NA :
library("igraph")
fb <- read.csv(file.choose(),header=FALSE)
ln <- read.csv(file.choose(),header=FALSE)
insta <- read.csv(file.choose(),header=FALSE)
insta <- read.csv(file.choose(),header=FALSE)
insta <- read.csv(file.choose(),header=FALSE)
fb <- read.csv(file.choose())
colnames(ln) <- c("ln1","ln2","ln3","ln4","ln6","ln6","ln7","ln8","fb9","ln10","ln11","ln12","ln13")
ln <- read.csv(file.choose())
insta <- read.csv(file.choose())
View(ln)
View(ln)
View(insta)
View(insta)
View(fb)
View(fb)
fb <- read.csv(file.choose())
net <- graph_from_data_frame(fb,insta,directed=F)
g1 <- graph_from_data_frame(fb, directed = TRUE, vertices =NULL)
plot(g1, layout=layout.sphere, main="sphere")
plot(g1, layout=layout.circle, main="circle")
plot(g1, layout=layout.random, main="random")
plot(g1, layout=layout.circle, main="circle")
g1 <- graph_from_data_frame(fb, directed = FALSE, vertices =NULL)
plot(g1, layout=layout.circle, main="circle")
fbmat <- as.matrix(fb)
g1 <- graph_from_data_frame(fbmat, directed = FALSE, vertices =NULL)
plot(g1, layout=layout.sphere, main="sphere")
plot(g1, layout=layout.circle, main="circle")
plot(g1, layout=layout.random, main="random")
g1 <- graph_from_data_frame(fb, directed = FALSE, vertices =NULL)
plot(g1, layout=layout.sphere, main="sphere")
plot(g1, layout=layout.circle, main="circle")
plot(g1, layout=layout.random, main="random")
g1 <- graph_from_data_frame(fb, directed = FALSE, vertices =insta)
g1 <- graph_from_data_frame(fb, directed = FALSE, vertices =9)
g1 <- graph_from_data_frame(fb, directed = FALSE, vertices =8)
plot(g1, layout=layout.sphere, main="sphere")
g1 <- graph_from_data_frame(fb, directed = FALSE, vertices =8)
g1 <- graph_from_data_frame(fb, directed = FALSE, vertices =NULL)
plot(g1, layout=layout.sphere, main="sphere")
plot(g1, layout=layout.circle, main="circle")
plot(g1, layout=layout.random, main="random")
g3 <- graph_from_data_frame(insta, directed = FALSE, vertices =NULL)
plot(g3, layout=layout.sphere, main="sphere")
plot(g3, layout=layout.circle, main="circle")
plot(g3, layout=layout.random, main="random")
g1 <- graph.edgelist(fb,directed=FALSE)
g1 <- adjacent_vertices(fb, directed = FALSE, vertices =NULL)
g1 <- adjacent_vertices(fb,mode=c("all"), vertices =NULL)
g1 <- graph(fb, directed = FALSE,n=4)
g1 <- graph(fb, directed = FALSE)
g1 <- graph.adjacency(as.matrix(fb), mode="undirected")
plot(g1)
plot(g1, layout=layout.sphere, main="sphere")
plot(g1, layout=layout.circle, main="circle")
plot(g1, layout=layout.random, main="random")
plot(g1)
g2 <- graph.adjacency(as.matrix(ln), mode="undirected")
plot(g2)
degree.cent <- centr_degree(g1, mode = "all")
View(degree.cent)
View(degree.cent)
degree.cent
degree.cent$res
closeness_fb <- closeness(g1, mode = "in", normalized = TRUE)
max(closeness_fb)
index <- which(closeness_fb == max(closeness_fb))
closeness_fb[index]
closeness_fb[index]
closeness.cent <- closeness(g1, mode="all")
closeness.cent
degree.cent <- centr_degree(g1, mode = "all")
max(degree.cent$res) # 2
degree.cent$res # 2
View(degree.cent)
View(degree.cent)
closeness.cent <- closeness(g1, mode="all")
closeness.cent
closeness.cent$res
closeness_fb <- closeness(g1, mode = "in", normalized = TRUE)
index <- which(closeness_fb == max(closeness_fb))
closeness_fb[index]
degree.cent <- centr_degree(g2, mode = "all")
degree.cent$res # 2
plot(g1)
degree.cent <- centr_degree(g2, mode = "all")
degree.cent$res # 2 3 3 3 2 3 3 3 2 3 3 3 3
g2 <- graph.adjacency(as.matrix(ln), mode="undirected")
plot(g2)
closeness_fb <- closeness(g1, mode = "in", normalized = TRUE)
g2 <- graph.adjacency(as.matrix(ln), mode="directed")
plot(g2)
degree.cent <- centr_degree(g2, mode = "in")
degree.cent$res # 2 3 3 3 2 3 3 3 2 3 3 3 3
degree.cent <- centr_degree(g2, mode = "in")
degree.cent$res # 2 3 3 3 2 3 3 3 2 3 3 3 3
closeness.cent <- closeness(g2, mode="in")
closeness.cent
max(closeness.cent)
g3 <- graph.adjacency(as.matrix(insta), mode="undirected")
plot(g3)
degree.cent <- centr_degree(g1, mode = "in")
degree.cent$res
degree.cent <- centr_degree(g1, mode = "all")
degree.cent$res #  2 2 2 2 2 2 2 2 2
degree.cent <- centr_degree(g3, mode = "all")
degree.cent$res #  2 2 2 2 2 2 2 2 2
plot(g3, layout=layout.sphere, main="sphere")
plot(g3, layout=layout.circle, main="circle")
library(readr)
wine <- read.csv(file.choose())
View(wine)
View(wine)
normalized_data <- scale(wine)
View(normalized_data)
View(normalized_data)
View(normalized_data)
d <- dist(normalized_data, method = "euclidean")
wine_hclust <- hclust(d,method="complete")
plot(wine_hclust,hang=-1)
# Converting the dendogram to have 3 clusters
flight_hclust <- cutree(wine_hclust, k = 3)
# Converting the dendogram to have 3 clusters
wine_hclust1 <- cutree(wine_hclust, k = 3)
plot(wine_hclust1,hang=-1)
View(wine_hclust)
View(wine_hclust)
matwine <- as.matrix(wine_hclust1)
# appended the matrix and original data read from csv as a dataframe
final <- data.frame(matwine, wine)
View(final)
View(final)
View(final)
# storing mean of the data for each cluster
aggregate(wine, by = list(final$matwine), FUN = mean)
attach(wine)
?princomp
# correlation matrix , calc the PCA score of each component and covariance matrix is set to NULL
pcaObj <- princomp(wine, cor = TRUE, scores = TRUE, covmat = NULL)
wine <- read.csv(file.choose())
View(wine)
View(wine)
attach(wine)
wine <- read.csv(file.choose())
attach(wine)
# correlation matrix , calc the PCA score of each component and covariance matrix is set to NULL
pcaObj <- princomp(wine, cor = TRUE, scores = TRUE, covmat = NULL)
View(pcaObj)
View(pcaObj)
loadings(pcaObj)
loadings
summary(pcaObj)
summary(pcaObj)
plot(pcaObj) # graph showing importance of principal components
biplot(pcaObj)
?cumsum
View(pcaObj)
View(pcaObj)
pcaObj
plot(cumsum(pcaObj$sdev * pcaObj$sdev) * 100 / (sum(pcaObj$sdev * pcaObj$sdev)), type = "b")
cumsum(pcaObj$sdev * pcaObj$sdev)
cumsum(pcaObj$sdev * pcaObj$sdev) * 100
caObj$sdev * pcaObj$sdev
pcaObj$sdev * pcaObj$sdev
pcaObj$sdev * pcaObj$sdev
cumsum(pcaObj$sdev * pcaObj$sdev)
pcaObj$sdev * pcaObj$sdev
sum(pcaObj$sdev * pcaObj$sdev)
cumsum(pcaObj$sdev * pcaObj$sdev) * 100
(sum(pcaObj$sdev * pcaObj$sdev))
553.5948
(sum(pcaObj$sdev * pcaObj$sdev))
plot(cumsum(pcaObj$sdev * pcaObj$sdev) * 100 / (sum(pcaObj$sdev * pcaObj$sdev)), type = "b")
pcaObj$scores
pcaObj$scores[, 1:3]
# Top 3 pca scores
final <- cbind(input[, 1], pcaObj$scores[, 1:3])
# Top 3 pca scores
final <- cbind(wine[, 1], pcaObj$scores[, 1:3])
View(final)
View(final)
View(final)
View(final)
View(final)
pcaObj$scores
View(pcaObj)
View(pcaObj)
type(pcaObj$scores)
dim(pcaObj$scores)
pcaObj$scores[, 1:3]
pcaObj$scores[, 1:3]
View(wine)
View(wine)
wine <- read.csv(file.choose())
wine1 <- wine(,c[-1])
wine1 <- wine(,c[-1])
wine1 <- wine[,c(-1)]
View(wine1)
View(wine1)
attach(wine1)
?princomp
# correlation matrix , calc the PCA score of each component and covariance matrix is set to NULL
pcaObj <- princomp(wine1, cor = TRUE, scores = TRUE, covmat = NULL)
str(pcaObj)
summary(pcaObj)
loadings(pcaObj)
plot(pcaObj) # graph showing importance of principal components
biplot(pcaObj)
plot(cumsum(pcaObj$sdev * pcaObj$sdev) * 100 / (sum(pcaObj$sdev * pcaObj$sdev)), type = "b")
pcaObj$scores
dim(pcaObj$scores) # 178 *13 ( removed 'Type' earlier)
# Top 3 pca scores [first 3 Cols , all 178 rows]
pcaObj$scores[, 1:3]
final <- cbind(wine[, 1], pcaObj$scores[, 1:3])
View(final)
# Scatter diagram
plot(final$Comp.1, final$Comp.2)
# Scatter diagram
plot(final[Comp.1], final[Comp.2])
# Scatter diagram
plot(final['Comp.1'], final['Comp.2'])
# Scatter diagram
plot(final['Comp.1'], final['Comp.2'],xlim=10)
plot
# Scatter diagram
plot?
plot(final['Comp.1'], final['Comp.2'])
# Scatter diagram
plot?
plot(final['Comp.1'], final['Comp.2'])
plot?
type(final)
class(final)
# Scatter diagram
plot(final[,1], final[,2])
###################### H_clust with PCA###############################
pcaObj1 <- princomp(wine1, cor = TRUE, scores = TRUE, covmat = NULL)
d <- dist(pcaObj1, method = "euclidean")
class(pcaObj1)
?princomp
wine_df <- as.data.frame(pcaObj1)
View(pcaObj)
View(pcaObj)
class(final)
View(final)
View(final)
wine_df <-  as.data.frame(final[,-1])
View(wine1)
View(wine_df)
View(wine_df)
d <- dist(wine_df, method = "euclidean")
# Hclust method ,distance calc by euclideans
wine_hclust <- hclust(d,method="complete")
View(wine_hclust)
View(wine_hclust)
plot(wine_hclust,hang=-1)
# Hclust method ,distance calc by euclideans
pca_hclust <- hclust(d,method="complete")
# Hclust method ,distance calc by euclideans
pca_hclust <- hclust(d,method="complete")
plot(pca_hclust,hang=-1)
library(readr)
wine <- read.csv(file.choose())
attach(wine)
# correlation matrix , calc the PCA score of each component and covariance matrix is set to NULL
pcaObj <- princomp(wine, cor = TRUE, scores = TRUE, covmat = NULL)
str(pcaObj)
summary(pcaObj)
loadings(pcaObj)
plot(pcaObj) # graph showing importance of principal components
biplot(pcaObj)
$
pcaObj$scores
dim(pcaObj$scores) # 178 *13 ( removed 'Type' earlier)
# Top 3 pca scores [first 3 Cols , all 178 rows]
pcaObj$scores[, 1:3]
final <- cbind(wine[, 1], pcaObj$scores[, 1:3])
View(final)
class(final)
# Scatter diagram
plot(final[,1], final[,2])
class(final)
wine_df <-  as.data.frame(final[,-1])
View(wine_df)
View(wine_df)
# Hclust method ,distance calc by euclideans
pca_hclust <- hclust(d,method="complete")
d <- dist(wine_df, method = "euclidean")
# Hclust method ,distance calc by euclideans
pca_hclust <- hclust(d,method="complete")
plot(pca_hclust,hang=-1)
# Converting the dendogram to have 3 clusters
wine_hclust1 <- cutree(wine_hclust, k = 3)
plot(wine_hclust1,hang=-1)
# Converting the dendogram to have 3 clusters
wine_hclust1 <- cutree(wine_hclust, k = 3)
# Converting the dendogram to have 3 clusters
wine_hclust1 <- cutree(pca_hclust, k = 3)
plot(wine_hclust1,hang=-1)
# created a matrix of wine_hclust1
matwine <- as.matrix(wine_hclust1)
View(matwine)
View(matwine)
View(matwine)
View(matwine)
View(matwine)
# appended the matrix and original data read from csv as a dataframe
final_wine <- data.frame(matwine, wine)
View(final_wine)
# storing mean of the data for each cluster by aggregating by cluster
aggregate(wine, by = list(final_wine$matwine), FUN = mean)
library(readr)
library(plyr)
library(animation)
library(readr)
library(cluster)
wine <- read_csv(file.choose())
normalized_data <- scale(wine)
View(wine)
twss <- NULL
for (i in 1:14) {
twss <- c(twss, kmeans(normalized_data, centers = i)$tot.withinss)
}
twss
plot(1:11, twss, type = "b", xlab = "Number of Clusters", ylab = "Within groups sum of squares")
title(sub = "K-Means Clustering Scree-Plot")
plot(1:11, twss, type = "b", xlab = "Number of Clusters", ylab = "Within groups sum of squares")
plot(1:11, twss, type = "b", xlab = "Number of Clusters", ylab = "Within groups sum of squares")
for (i in 1:14) {
twss <- c(twss, kmeans(normalized_data, centers = i)$tot.withinss)
}
twss
plot(1:11, twss, type = "b", xlab = "Number of Clusters", ylab = "Within groups sum of squares")
twss <- NULL
for (i in 1:15) {
twss <- c(twss, kmeans(normalized_data, centers = i)$tot.withinss)
}
twss
title(sub = "K-Means Clustering Scree-Plot")
plot(1:11, twss, type = "b", xlab = "Number of Clusters", ylab = "Within groups sum of squares")
twss <- NULL
for (i in 1:14) {
twss <- c(twss, kmeans(normalized_data, centers = i)$tot.withinss)
}
twss
plot(1:14, twss, type = "b", xlab = "Number of Clusters", ylab = "Within groups sum of squares")
title(sub = "K-Means Clustering Scree-Plot")
fit <- kmeans.ani(normalized_data, 3) #trying with 4 clusters to get minimum withinss.
str(fit)
fit$centers # gives final centroid of each clusters
fit$cluster
View(final <- data.frame(fit$cluster, wine))
View(aggregate(wine, by = list(fit$cluster), FUN = mean)) #to match cols with their resp. mean and cluster number for inference
clust <- clara(normalized_data,3)
View(clust)
View(clust)
clusplot(clust)
library(plyr)
library(animation)
library(readr)
library(cluster)
wine <- read_csv(file.choose())
# correlation matrix , calc the PCA score of each component and covariance matrix is set to NULL
pcaObj <- princomp(wine, cor = TRUE, scores = TRUE, covmat = NULL)
str(pcaObj)
summary(pcaObj)
loadings(pcaObj)
plot(pcaObj) # graph showing importance of principal components
biplot(pcaObj)
plot(cumsum(pcaObj$sdev * pcaObj$sdev) * 100 / (sum(pcaObj$sdev * pcaObj$sdev)), type = "b")
dim(pcaObj$scores) # 178 *14
# Top 3 pca scores [first 3 Cols , all 178 rows]
pcaObj$scores[, 1:3]
final <- cbind(wine[, 1], pcaObj$scores[, 1:3])
View(final)
# Scatter diagram
plot(final[,1], final[,2])
View(final)
View(final)
wine_df <-  as.data.frame(final[,-1])
# find TWss for for each cluster , here TWSS will be no.of columns
twss <- NULL
for (i in 1:3) {
twss <- c(twss, kmeans(wine_df, centers = i)$tot.withinss)
}
twss
plot(1:3, twss, type = "b", xlab = "Number of Clusters", ylab = "Within groups sum of squares")
title(sub = "K-Means Clustering Scree-Plot")
# k =2
# Animated cluster diagram for k=2
fit <- kmeans.ani(wine_df, 2) #trying with 2 clusters to get minimum withinss.
str(fit)
str(fit)
fit$centers # gives final centroid of each clusters
View(final <- data.frame(fit$cluster, wine))
View(final <- data.frame(fit$cluster, wine))
View(aggregate(wine, by = list(fit$cluster), FUN = mean)) #group by cluster (1,2,3) find mean
# Actual cluster diagram for k=2
clust <- clara(wine_df,2)
clusplot(clust)
install.packages("rJava")
install.packages("RWeka")
NGramTokenizer
install.packages("rvest")
install.packages("XML")
install.packages("Rtools")
install.packages("magrittr")
library(rvest)
library(XML)
library(magritter)
library(magrittr)
aurl <- "https://www.snapdeal.com/product/lg-42lb5510-42-inches-fully/532808444/reviews?page"
LG_reviews <- NULL
for (i in 1:3){
surl <- read_html(as.character(paste(aurl,i,sep="=")))
rev <- murl %>% html_nodes(".user-review") %>% html_text()
LG_reviews <- c(LG_reviews,rev)
}
aurl <- "https://www.snapdeal.com/product/lg-42lb5510-42-inches-fully/532808444/reviews?page"
LG_reviews <- NULL
for (i in 1:3){
surl <- read_html(as.character(paste(aurl,i,sep="=")))
rev <- surl %>% html_nodes(".user-review") %>% html_text()
LG_reviews <- c(LG_reviews,rev)
}
LG_reviews
?html_nodes
??html_nodes
?html_text
??html_text
write.table(LG_reviews,"Snapdeal_LGTV.txt")
getwd()
setwd("D:/360Assignments/Submission/10 Text Mining NLP/Assignment")
write.table(LG_reviews,"Snapdeal_LGTV.txt")
magrittr
# backing up our LG review in txt variable
txt <- LG_reviews
txt
library(tm)
#full ur is formed by concat of  paste(url , pagenumber is i , seperated by =) .
aurl <- "https://www.snapdeal.com/product/lg-42lb5510-42-inches-fully/532808444/reviews?page"
LG_reviews
txt
str(txt)
length(txt)
length(txt)
View(txt)
Snapdeal_LGTV.txt
# Convert the character data to corpus type
x <- Corpus(VectorSource(txt))
View(x)
View(x)
View(x)
