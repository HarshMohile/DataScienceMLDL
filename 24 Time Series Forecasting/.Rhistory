library(readr)
View(air) # Seasonality 12 months
air <- read.csv(file.choose())
View(air) # Seasonality 12 months
View(air) # Seasonality 12 months
View(air) # Seasonality 12 months
library(readr)
View(air) # Seasonality 12 months
View(air)
View(air)
air <- read.excel(file.choose())
air <- read.excel(file.choose())
library(readxl)
air <- read.excel(file.choose())
air <- read_excel(file.choose())
View(air) # Seasonality 12 months
library(readr)
Walmart <- read.csv(file.choose()) # read the Walmart data
View(Walmart) # Seasonality 12 months
# Pre Processing
# input t
Walmart["t"] <- c(1:159)
View(Walmart)
View(Walmart)
Walmart["t_square"] <- Walmart["t"] * Walmart["t"]
View(Walmart)
View(Walmart)
Walmart["log_footfalls"] <- log(Walmart["Footfalls"])
View(Walmart)
View(Walmart)
library(readxl)
air <- read_excel(file.choose())
View(air) # Seasonality 12 months
# Creating  table for t ,t2 , log(Passengers) in dataframe
# Pre Processing
# input t
air["t"] <- c(1:96)
air["t_square"] <- air["t"] * air["t"]
air["log_footfalls"] <- log(air["Footfalls"])
air["log_Passengers"] <- log(air["Passengers"])
View(air)
View(air)
View(air)
View(air)
library(caTools)
set.seed(0)
split <- sample.split(air$Passengers)# --------- both are X_train , X_test
train <- subset(air, split == TRUE)
test <- subset(air, split == FALSE)
linear_model <- lm(air$Passengers ~ t, data = train)
View(air)
View(air)
View(train)
View(train)
air <- air[,c(-3,,-4,-5)]
air <- air[,c(-3,-4,-5)]
View(air)
View(air)
library(caTools)
set.seed(0)
split <- sample.split(air$Passengers)# --------- both are X_train , X_test
train <- subset(air, split == TRUE)
test <- subset(air, split == FALSE)
linear_model <- lm(air$Passengers ~ t, data = train)
# Creating  table for t ,t2 , log(Passengers) in dataframe
# Pre Processing
# input t
air["t"] <- c(1:96)
View(air)
air["t_square"] <- air["t"] * air["t"]
air["log_Passengers"] <- log(air["Passengers"])
library(caTools)
set.seed(0)
split <- sample.split(air$Passengers)# --------- both are X_train , X_test
train <- subset(air, split == TRUE)
test <- subset(air, split == FALSE)
View(train)
View(test)
View(test)
linear_model <- lm(air$Passengers ~ t, data = train)
View(train)
View(train)
########################### LINEAR MODEL #############################
attach(air)
linear_model <- lm(Passengers ~ t, data = train)
summary(linear_model)
linear_pred <- data.frame(predict(linear_model, interval = 'predict', newdata = test))
rmse_linear <- sqrt(mean((test$Passengers - linear_pred$fit)^2, na.rm = T))
rmse_linear
expo_model <- lm(log_Passengers ~ t, data = train)
summary(expo_model)
expo_pred <- data.frame(predict(expo_model, interval = 'predict', newdata = test))
rmse_expo <- sqrt(mean((test$log_Passengers - exp(expo_pred$fit))^2, na.rm = T))
rmse_expo
rmse_expo <- sqrt(mean((test$Passengers - exp(expo_pred$fit))^2, na.rm = T))
rmse_expo
Quad_model <- lm(Passengers ~ t + t_square, data = train)
summary(Quad_model)
Quad_pred <- data.frame(predict(Quad_model, interval = 'predict', newdata = test))
rmse_Quad <- sqrt(mean((test$Passengers - Quad_pred$fit)^2, na.rm = T))
rmse_Quad
View(air)
View(air)
test_data <- read.xlsx(file.choose(), 1)
air[5:]
test_data <- air[5:,]
air[5,]
####################### Predicting new data (Linear had lowest RMSE )#############################
test_data <- air[5,]
View(test_data)
pred_new <- predict(linear_model, newdata = test_data, interval = 'predict')
pred_new <- as.data.frame(pred_new)
pred_new$fit
plot(Add_sea_Quad_model_final)
plot(linear_model)
linear_model$residuals
############  ACF for getting Q value (past error ) Moving Averages
# ACF plot
acf(linear_model$residuals, lag.max = 40) # take all residual value of the model built & plot ACF plot
pacf(linear_model$residuals, lag.max = 40)
A <- sarima(linear_model$residuals,1, 1, 1, 1,1,1,12)
library(forecast)
View(air)
View(air)
y <- ts(air$Passengers, frequency= 12)
y.diff <- diff(y ,lag=40 ,differnces =12)
ggtsdisplay(y.diff)
A <- sarima(linear_model$residuals,1, 1, 1, 1,1,1,12)
sarima(linear_model$residuals,1, 1, 1, 1,1,1,12)
library(astsa)
install.packages("astsa")
sarima(linear_model$residuals,1, 1, 1, 1,1,1,12)
Arima <- arima(linear_model$residuals,1, 1, 1, 1,1,1,12)
Arima <- arima(linear_model$residuals,1, 1, 1)
Arima <- arima(linear_model$residuals,order=c(1, 1, 1))
A <- arima(linear_model$residuals,order=c(1, 1, 1))
summary(A)
A <- arima(y.diff,order=c(1, 1, 1))
summary(A)
A$coef
A$residuals
acf(ARerrors, lag.max = 12)
A <- sarima(y.diff,order=c(1, 1, 1))
acf(ARerrors, lag.max = 12)
ARerrors <- A$residuals
acf(ARerrors, lag.max = 12)
errors_12 <- forecast(A, h = 12)
View(errors_12)
future_errors <- data.frame(errors_12)
class(future_errors)
future_errors <- future_errors$Point.Forecast
predicted_new_values <- pred_new$fit + future_errors
model <- arima(y.diff,order=c(1, 1, 1))
model <- arima(y.diff,order=c(1, 1, 1))
summary(model)
model$coef
model$residuals
ARerrors <- model$residuals
acf(ARerrors, lag.max = 12)
errors_12 <- forecast(model, h = 12)
View(errors_12)
future_errors <- data.frame(errors_12)
class(future_errors)
future_errors <- future_errors$Point.Forecast
future_errors
future_errors$Point.Forecast
fpe <- future_errors$Point.Forecast
future_errors <- future_errors$Point.Forecast
future_errors <- data.frame(errors_12)
class(future_errors)
fpe <- future_errors$Point.Forecast
fpe
predicted_new_values <- pred_new$fit + fpe
predicted_new_values
model <- arima(y.diff,order=c(1, 1, 1),seasonal = list(order=c(1,1,1),period=12),)
summary(model)
model$coef
model$residuals
SARerrors <- model$residuals
acf(SARerrors, lag.max = 12)
errors_12 <- forecast(model, h = 12)
future_errors <- data.frame(errors_12)
class(future_errors)
fpe <- future_errors$Point.Forecast
