library(readr)
library(caret) #ML Model buidling package
library(tidyverse) #ggplot and dplyr
library(MASS) #Modern Applied Statistics with S
library(mlbench) #data sets from the UCI repository.
library(summarytools)
library(corrplot) #Correlation plot
library(gridExtra) #Multiple plot in single grip space
library(timeDate)
library(pROC) #ROC
library(caTools) #AUC
library(rpart.plot) #CART Decision Tree
library(e1071) #imports graphics, grDevices, class, stats, methods, utils
library(graphics) #fourfoldplot
db <- read.csv(file.choose())
str(db)
names(db)[names(db)=="Class.variable"] <- "Diabetic_check"
#### Splitting the train , test X
library(caTools)
set.seed(0)
split <- sample.split(db$Diabetic_check, SplitRatio = 0.8)
db_train <- subset(db, split == TRUE)
db_test <- subset(db, split == FALSE)
summary(db_train)
prop.table(table(db$Diabetic_check))
## Descriptive Statistics
summarytools::descr(db)
ggplot(db, aes(db$Diabetic_check, fill="Diabetic_check"))+
geom_bar()+
theme_bw() +
labs(title = "Diabetes CountPLot")
Corr <- cor(db[, setdiff(names(db),'Diabetic_check')])
Corr
# install.packages("xgboost")
library(xgboost)
y_train  <- db_train$Diabetic_check == "YES"
?model.matrix
X_train <- model.matrix(db_train$Diabetic_check ~ .-1, data = db_train)
X_train
y_train
y_test <- db_test$Diabetic_check == "YES"
X_test <- model.matrix(db_test$Diabetic_check ~ .-1, data = db_test)
X_test
y_test
Xmatrix_train <- xgb.DMatrix(data = X_train, label = y_train)
# DMatrix on test
Xmatrix_test <- xgb.DMatrix(data = X_test, label = y_test)
xg_boosting <- xgboost(data = Xmatrix_train, nround = 50,
objective = "multi:softmax", eta = 0.3,
num_class = 2, max_depth = 100)
# Prediction for test data
xgbpred_test <- predict(xg_boosting, Xmatrix_test) ## predict( model , test )
table(y_test, xgbpred_test) ###  confusion_matrix( y_test, pred)
mean(y_test == xgbpred_test) ### Accuracy
# Prediction for train data
xgbpred_train <- predict(xg_boosting, Xmatrix_train)  ## predict( model , train )
table(y_train, xgbpred_train)
mean(y_train == xgbpred_train)
library(DiagrammeR)
xgb.plot.multi.trees(feature_names = names(Xmatrix_train),
model = xg_boosting)
Xmatrix_train
